<% layout("/layouts/boilerplate") %>

<div class="container my-5">
  <div class="row justify-content-center">
    <div class="col-lg-7 col-md-8">
      <div class="card border-0 shadow-lg rounded-4 overflow-hidden booking-card-elevated">
        <!-- Header -->
        <div class="card-header text-white text-center py-4 booking-header">
          <h3 class="mb-1 fw-bold">
            <i class="fas fa-calendar-check me-2"></i>Book This Property
          </h3>
          <h5 class="mb-0 opacity-90"><%= listing.title %></h5>
        </div>

        <!-- Form -->
        <div class="card-body p-4 p-md-5 bg-white">
          <form action="/listings/<%= listing._id %>/bookings" method="POST" class="needs-validation" novalidate>
            <!-- Date Row -->
            <div class="row g-3">
              <div class="col-md-6">
                <label for="checkin" class="form-label fw-semibold">Check-in Date</label>
                <input
                  type="date"
                  id="checkin"
                  name="checkIn"
                  class="form-control form-control-lg"
                  required
                  min="<%= today %>"
                >
                <div class="invalid-feedback">Please select a valid check-in date.</div>
              </div>

              <div class="col-md-6">
                <label for="checkout" class="form-label fw-semibold">Check-out Date</label>
                <input
                  type="date"
                  id="checkout"
                  name="checkOut"
                  class="form-control form-control-lg"
                  required
                  min="<%= tomorrow %>"
                >
                <div class="invalid-feedback">Please select a valid check-out date.</div>
              </div>
            </div>

            <!-- Guests -->
            <div class="mt-3">
              <label for="guests" class="form-label fw-semibold">Number of Guests</label>
              <select id="guests" name="guests" class="form-select form-select-lg" required>
                <option value="">Select guests</option>
                <option value="1">1 Guest</option>
                <option value="2">2 Guests</option>
                <option value="3">3 Guests</option>
                <option value="4">4 Guests</option>
                <option value="5">5 Guests</option>
                <option value="6">6 Guests</option>
              </select>
              <div class="invalid-feedback">Please choose number of guests.</div>
            </div>

            <!-- Price Summary -->
            <div class="mt-4">
              <div class="summary-card rounded-3 p-3 p-md-4">
                <div class="d-flex justify-content-between align-items-center mb-2">
                  <span class="text-muted">Price per night</span>
                  <span class="fw-bold">₹<%= listing.price.toLocaleString() %></span>
                </div>
                <div class="d-flex justify-content-between align-items-center">
                  <span class="text-muted">Total</span>
                  <span id="totalPrice" class="fw-bold text-success">Select dates</span>
                </div>
              </div>
            </div>

            <!-- Submit -->
            <div class="mt-4">
              <button type="submit" class="btn btn-danger btn-lg w-100 btn-gradient booking-submit">
                <i class="fas fa-check-circle me-2"></i>Confirm Booking
              </button>
            </div>
          </form>

          <!-- Back Link -->
          <div class="text-center mt-3">
            <a href="/listings/<%= listing._id %>" class="text-muted text-decoration-none link-hover">
              <i class="fas fa-arrow-left me-1"></i>Back to listing
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
/* Theme */
:root {
  --nesto-red: #fe424d;
  --nesto-red-dark: #e63946;
  --nesto-orange: #ff6b6b;
}

/* Card elevation + hover */
.booking-card-elevated {
  transition: transform 0.25s ease, box-shadow 0.25s ease;
  border: 1px solid rgba(0,0,0,0.04);
}
.booking-card-elevated:hover {
  transform: translateY(-6px);
  box-shadow: 0 18px 40px rgba(0,0,0,0.12);
}

/* Header gradient */
.booking-header {
  background: linear-gradient(135deg, var(--nesto-red), var(--nesto-orange));
}

/* Form controls focus styling with theme */
.form-control:focus, .form-select:focus {
  border-color: var(--nesto-red) !important;
  box-shadow: 0 0 0 0.2rem rgba(254, 66, 77, 0.25) !important;
}

/* Price summary card */
.summary-card {
  background: linear-gradient(180deg, #fff, #fafafa);
  border: 1px solid rgba(0,0,0,0.05);
}

/* Button gradient + hover */
.btn-gradient {
  background: linear-gradient(45deg, var(--nesto-red), var(--nesto-orange));
  border: none;
  transition: transform 0.15s ease, box-shadow 0.2s ease, filter 0.2s ease;
}
.btn-gradient:hover {
  transform: translateY(-2px);
  filter: brightness(1.03);
  box-shadow: 0 10px 24px rgba(254, 66, 77, 0.35);
}
.btn-gradient:active {
  transform: translateY(0);
}

/* Links subtle hover */
.link-hover:hover {
  color: var(--nesto-red) !important;
}

/* Subtle header opacity */
.opacity-90 { opacity: 0.9; }
</style>

<script>
// Price calculation with integer price
const checkinInput = document.getElementById('checkin');
const checkoutInput = document.getElementById('checkout');
const totalPriceElement = document.getElementById('totalPrice');
const pricePerNight = Number("<%= listing.price %>"); // ensure numeric

function updateTotal() {
  const checkin = new Date(checkinInput.value);
  const checkout = new Date(checkoutInput.value);

  if (checkin instanceof Date && checkout instanceof Date && !isNaN(checkin) && !isNaN(checkout) && checkout > checkin) {
    const nights = Math.ceil((checkout - checkin) / (1000 * 60 * 60 * 24));
    const total = nights * pricePerNight;
    totalPriceElement.textContent = `₹${total.toLocaleString()} (${nights} night${nights > 1 ? 's' : ''})`;
  } else {
    totalPriceElement.textContent = 'Select dates';
  }
}

// Sync checkout min date
checkinInput.addEventListener('change', function() {
  const checkinDate = new Date(this.value);
  if (!isNaN(checkinDate)) {
    const nextDay = new Date(checkinDate);
    nextDay.setDate(nextDay.getDate() + 1);
    checkoutInput.min = nextDay.toISOString().split('T')[0];

    if (checkoutInput.value && new Date(checkoutInput.value) <= checkinDate) {
      checkoutInput.value = '';
    }
  }
  updateTotal();
});

checkoutInput.addEventListener('change', updateTotal);

// Bootstrap validation (optional but nice UX)
(function() {
  const form = document.querySelector('.needs-validation');
  form.addEventListener('submit', function(e) {
    if (!form.checkValidity()) {
      e.preventDefault();
      e.stopPropagation();
    }
    form.classList.add('was-validated');
  }, false);
})();
</script>


